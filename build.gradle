apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'war'

def defaultEncoding = 'UTF-8'
tasks.withType(AbstractCompile).each { it.options.encoding = defaultEncoding }
tasks.withType(GroovyCompile).each { it.groovyOptions.encoding = defaultEncoding }

javadoc {
	options.charSet = defaultEncoding
	options.encoding = defaultEncoding
	options.memberLevel = JavadocMemberLevel.PUBLIC
}

tasks.withType(JavaCompile) {
	options.compilerArgs << "-parameters"
}

repositories {
	mavenCentral()
	jcenter()
}

dependencies {
	compile fileTree(dir: 'lib',
		includes: ['**/*.jar'],
		excludes: ['**/*-sources.jar', '**/*-javadoc.jar'])
	
	providedCompile group: 'org.glassfish.jersey.bundles', name: 'jaxrs-ri', version: '2.14'
	providedCompile group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet-core', version: '2.14'
	providedCompile group: 'org.glassfish.jersey.media', name: 'jersey-media-multipart', version: '2.14'
	
	compile group: 'org.apache.poi', name: 'poi', version: '4.1.0'
	compile group: 'org.apache.poi', name: 'poi-ooxml', version: '4.1.0'
	
	testImplementation 'junit:junit:4.12'
}

defaultTasks 'clean', 'build', 'war'

war {
	archiveName = "${archivesBaseName}.war"
}

task initializeProjectFiles {
	doLast {
		if(file('src/main/java/Library.java').exists()) {
			file('src/main/resources').mkdirs()
			file('src/main/webapp/WEB-INF').mkdirs()
			file('lib').mkdir()
			delete "src/test"
			delete "src/main/java/Library.java"
		}
	}
}

task deploy(type: Copy, dependsOn: war) {
	setGroup('build')
	from 'build/libs'
	into '${user.home}/../../../Desktop/zks/9.4.11.v20180605/libexec/webapps'
}

tasks.eclipseClasspath.dependsOn(cleanEclipseClasspath)
tasks.eclipseClasspath.dependsOn(initializeProjectFiles)
tasks.cleanEclipseClasspath.mustRunAfter(initializeProjectFiles)